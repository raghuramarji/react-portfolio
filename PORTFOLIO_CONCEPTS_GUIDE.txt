# Portfolio Development Guide - Concepts & Syntax

## Table of Contents
1. React Fundamentals
2. State Management with Redux
3. CSS Styling Techniques
4. Component Architecture
5. Event Handling
6. Responsive Design
7. Animation & Transitions
8. Form Handling
9. Performance Optimization
10. Best Practices

---

## 1. REACT FUNDAMENTALS

### Components
Components are the building blocks of React applications.

**Functional Components:**
```jsx
import React from 'react'

function ComponentName() {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  )
}

export default ComponentName
```

**Component with Props:**
```jsx
function Greeting({ name, age }) {
  return (
    <div>
      <h1>Hello {name}</h1>
      <p>You are {age} years old</p>
    </div>
  )
}

// Usage
<Greeting name="Raghu" age={25} />
```

### React Hooks

**useState - Managing Local State:**
```jsx
import React, { useState } from 'react'

function Counter() {
  const [count, setCount] = useState(0)
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

**useEffect - Side Effects:**
```jsx
import React, { useState, useEffect } from 'react'

function Timer() {
  const [seconds, setSeconds] = useState(0)
  
  useEffect(() => {
    const interval = setInterval(() => {
      setSeconds(prev => prev + 1)
    }, 1000)
    
    // Cleanup function
    return () => clearInterval(interval)
  }, []) // Empty dependency array = run once on mount
  
  return <div>Seconds: {seconds}</div>
}
```

**useEffect Dependencies:**
```jsx
// Run on every render
useEffect(() => {
  console.log('Runs on every render')
})

// Run once on mount
useEffect(() => {
  console.log('Runs once on mount')
}, [])

// Run when specific values change
useEffect(() => {
  console.log('Runs when count changes')
}, [count])
```

---

## 2. STATE MANAGEMENT WITH REDUX

### Redux Setup

**Store Creation:**
```javascript
// store.js
import { legacy_createStore as createStore } from 'redux'
import rootReducer from './reducer'

const store = createStore(rootReducer)
export default store
```

**Reducer:**
```javascript
// reducer.js
const initialState = {
  activeTab: 'home'
}

const rootReducer = (state = initialState, action) => {
  switch(action.type) {
    case 'ACTIVE_TAB':
      return { ...state, activeTab: action.payload }
    default:
      return state
  }
}

export default rootReducer
```

**Actions:**
```javascript
// action.js
export const changeTabActive = (data) => ({
  type: 'ACTIVE_TAB',
  payload: data
})
```

**Connecting Components to Redux:**
```jsx
import React from 'react'
import { connect } from 'react-redux'
import { changeTabActive } from '../redux/action'

function NavBar({ activeTab, changeTabActive }) {
  return (
    <nav>
      <span 
        className={activeTab === 'home' ? 'active' : ''}
        onClick={() => changeTabActive('home')}
      >
        Home
      </span>
    </nav>
  )
}

const mapStateToProps = (state) => ({
  activeTab: state.activeTab
})

export default connect(mapStateToProps, { changeTabActive })(NavBar)
```

**Provider Setup:**
```jsx
// App.js
import { Provider } from 'react-redux'
import store from './redux/store'

function App() {
  return (
    <Provider store={store}>
      <main>
        <NavBar />
        {/* Other components */}
      </main>
    </Provider>
  )
}
```

---

## 3. CSS STYLING TECHNIQUES

### Modern CSS Features

**CSS Variables:**
```css
:root {
  --primary-color: #d02e23;
  --secondary-color: #7a43b6;
  --background: #010824;
}

.element {
  background-color: var(--primary-color);
}
```

**Flexbox:**
```css
.flex-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 20px;
}
```

**CSS Grid:**
```css
.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
}
```

**Gradients:**
```css
.gradient-bg {
  background: linear-gradient(45deg, #d02e23, #7a43b6);
}

.gradient-text {
  background: linear-gradient(45deg, #d02e23, #7a43b6);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
```

**Backdrop Filter (Glass Morphism):**
```css
.glass-effect {
  backdrop-filter: blur(50px);
  background-color: rgba(1, 8, 36, 0.4);
  border: 1px solid rgba(238, 238, 238, 0.2);
}
```

### CSS Nesting (Modern Syntax)
```css
.component {
  padding: 20px;
  
  & .title {
    font-size: 2rem;
    color: #eee;
    
    &:hover {
      color: #e945e3;
    }
  }
  
  & .content {
    margin-top: 20px;
    
    & p {
      line-height: 1.6;
    }
  }
}
```

---

## 4. ANIMATIONS & TRANSITIONS

### CSS Transitions:**
```css
.button {
  transition: all 0.3s ease;
  transform: translateY(0);
}

.button:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 25px rgba(224, 46, 35, 0.3);
}
```

**CSS Animations:**
```css
@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

.pulsing-element {
  animation: pulse 2s infinite;
}

@keyframes gradientAnimation {
  to { background-position: 200% center; }
}

.animated-gradient {
  background-size: 200% auto;
  animation: gradientAnimation 2s linear infinite;
}
```

---

## 5. EVENT HANDLING

### Click Events:**
```jsx
function Button() {
  const handleClick = (event) => {
    console.log('Button clicked')
    event.preventDefault() // Prevent default behavior
  }
  
  return <button onClick={handleClick}>Click me</button>
}
```

**Form Events:**
```jsx
function ContactForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: ''
  })
  
  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }
  
  const handleSubmit = (e) => {
    e.preventDefault()
    console.log('Form submitted:', formData)
  }
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        name="name"
        value={formData.name}
        onChange={handleInputChange}
        placeholder="Your Name"
      />
      <button type="submit">Submit</button>
    </form>
  )
}
```

**Scroll Events:**
```jsx
useEffect(() => {
  const handleScroll = () => {
    const scrollPosition = window.scrollY
    console.log('Scroll position:', scrollPosition)
  }
  
  window.addEventListener('scroll', handleScroll)
  return () => window.removeEventListener('scroll', handleScroll)
}, [])
```

---

## 6. RESPONSIVE DESIGN

### Media Queries:**
```css
/* Mobile First Approach */
.container {
  padding: 15px;
}

@media (min-width: 768px) {
  .container {
    padding: 20px;
  }
}

@media (min-width: 1024px) {
  .container {
    padding: 30px;
  }
}
```

**Responsive Grid:**
```css
.responsive-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
}

@media (min-width: 768px) {
  .responsive-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 1024px) {
  .responsive-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}
```

---

## 7. COMPONENT PATTERNS

### Conditional Rendering:**
```jsx
function Component({ isVisible, user }) {
  return (
    <div>
      {isVisible && <p>This is visible</p>}
      
      {user ? (
        <p>Welcome, {user.name}</p>
      ) : (
        <p>Please log in</p>
      )}
      
      <p className={isVisible ? 'visible' : 'hidden'}>
        Conditional class
      </p>
    </div>
  )
}
```

**List Rendering:**
```jsx
function SkillsList({ skills }) {
  return (
    <div>
      {skills.map((skill, index) => (
        <div key={skill.id || index} className="skill-item">
          <h3>{skill.name}</h3>
          <p>{skill.description}</p>
        </div>
      ))}
    </div>
  )
}
```

---

## 8. PERFORMANCE OPTIMIZATION

### React.memo (Prevent Unnecessary Re-renders):**
```jsx
import React, { memo } from 'react'

const ExpensiveComponent = memo(function ExpensiveComponent({ data }) {
  return (
    <div>
      {/* Complex rendering logic */}
    </div>
  )
})
```

**useCallback (Memoize Functions):**
```jsx
import React, { useCallback, useState } from 'react'

function Parent() {
  const [count, setCount] = useState(0)
  
  const handleClick = useCallback(() => {
    setCount(prev => prev + 1)
  }, [])
  
  return <Child onClick={handleClick} />
}
```

**useMemo (Memoize Expensive Calculations):**
```jsx
import React, { useMemo } from 'react'

function ExpensiveCalculation({ data }) {
  const expensiveValue = useMemo(() => {
    return data.reduce((sum, item) => sum + item.value, 0)
  }, [data])
  
  return <div>Result: {expensiveValue}</div>
}
```

---

## 9. COMMON PATTERNS USED IN PORTFOLIO

### Timeline Component Pattern:**
```jsx
function Timeline({ items }) {
  return (
    <div className="timeline-container">
      {items.map((item, index) => (
        <div key={item.id} className="timeline-item">
          <div className="timeline-dot">
            <item.icon />
          </div>
          <div className="timeline-content">
            {/* Content */}
          </div>
        </div>
      ))}
    </div>
  )
}
```

**Card Component Pattern:**
```jsx
function Card({ title, description, children, className = '' }) {
  return (
    <div className={`card ${className}`}>
      <div className="card-header">
        <h3>{title}</h3>
      </div>
      <div className="card-content">
        <p>{description}</p>
        {children}
      </div>
    </div>
  )
}
```

**Toggle State Pattern:**
```jsx
function ExpandableSection({ title, children }) {
  const [isExpanded, setIsExpanded] = useState(false)
  
  return (
    <div className="expandable">
      <button onClick={() => setIsExpanded(!isExpanded)}>
        {title} {isExpanded ? '−' : '+'}
      </button>
      {isExpanded && (
        <div className="content">
          {children}
        </div>
      )}
    </div>
  )
}
```

---

## 10. BEST PRACTICES

### File Organization:**
```
src/
├── components/
│   ├── NavBar.jsx
│   ├── Home.jsx
│   └── BackToTop.jsx
├── styling/
│   ├── projects.css
│   └── contacts.css
├── redux/
│   ├── store.js
│   ├── reducer.js
│   └── action.js
└── assets/
    └── images/
```

**Component Naming:**
- Use PascalCase for components: `NavBar`, `WorkExperience`
- Use camelCase for functions and variables: `handleClick`, `isVisible`
- Use kebab-case for CSS classes: `nav-bar`, `work-experience`

**State Management Guidelines:**
- Use local state (useState) for component-specific data
- Use global state (Redux) for data shared across components
- Keep state as minimal as possible
- Normalize complex state structures

**CSS Best Practices:**
- Use consistent naming conventions (BEM, etc.)
- Organize CSS by component
- Use CSS custom properties for theme values
- Implement mobile-first responsive design
- Use semantic HTML elements

**Performance Tips:**
- Minimize re-renders with React.memo
- Use keys properly in lists
- Optimize images and assets
- Implement code splitting for large apps
- Use CSS transforms for animations (better performance)

**Accessibility:**
- Use semantic HTML elements
- Add proper ARIA labels
- Ensure keyboard navigation works
- Maintain good color contrast
- Provide alternative text for images

---

## 11. DEBUGGING TECHNIQUES

**Console Logging:**
```jsx
function Component({ data }) {
  console.log('Component rendered with data:', data)
  
  useEffect(() => {
    console.log('Effect ran')
  }, [])
  
  return <div>Component</div>
}
```

**React Developer Tools:**
- Install React DevTools browser extension
- Inspect component props and state
- Profile component performance
- Track state changes

**Common Issues & Solutions:**
1. **State not updating immediately**: State updates are asynchronous
2. **Infinite re-renders**: Check useEffect dependencies
3. **CSS not applying**: Check class names and CSS specificity
4. **Event handlers not working**: Ensure proper binding and syntax

---

## 12. DEPLOYMENT & BUILD

**Build for Production:**
```bash
npm run build
```

**Environment Variables:**
```javascript
// .env file
REACT_APP_API_URL=https://api.example.com

// Usage in code
const apiUrl = process.env.REACT_APP_API_URL
```

**Package.json Scripts:**
```json
{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  }
}
```

---

This documentation covers the main concepts and patterns used in your portfolio. Each section includes practical examples that you can reference and modify for your projects.
